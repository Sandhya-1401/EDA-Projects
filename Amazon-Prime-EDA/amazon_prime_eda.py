# -*- coding: utf-8 -*-
"""Amazon-Prime-EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N0hXs2pwgtLm16cdqHFYU1zaSkU0zM04

# **Project Name**

## **Amazon Prime Content Analysis**

Project Type: EDA

Contribution - Individual

Member Name: Rana Sandhya

# **Project Summary**

## **Unlocking Content Trends on Netflix Through Data Exploration**

This project presents a detailed Exploratory Data Analysis (EDA) of Amazon Prime‚Äôs content catalog to uncover valuable insights into viewing trends, genre preferences, content ratings, casting patterns, and regional dynamics.

Using Python-powered data analysis and visualization, this study addresses key business questions such as:

- üìÖ How has Amazon Prime‚Äôs content evolved over the years?
- üé¨ Which genres and content types (Movies vs TV Shows) dominate the platform?
- üåç What countries and regions are most represented in content production?
- ‚è±Ô∏è What is the typical duration of movies and structure of TV series?
- üåü How do IMDb ratings and certifications impact viewer engagement?
- üé≠ Who are the most frequently featured cast members?

These insights empower Amazon Prime to make data-informed decisions around:
- Content acquisition and production strategy,
- Regional content expansion,
- Optimizing content length and release formats,
- Enhancing customer experience and retention through targeted content.

By aligning data insights with strategic goals, this EDA supports Amazon Prime‚Äôs mission to remain a leading global streaming platform.

# **GitHub Link**

https://github.com/Sandhya-1401/EDA-projects/tree/main/Amazon-Prime-EDA

# **Problem Statement**

As Amazon Prime continues to expand its digital content library globally, it faces the challenge of understanding user preferences across diverse regions, genres, and content types. With thousands of titles and a growing user base, identifying what content resonates best ‚Äî and where strategic content gaps exist ‚Äî is crucial for enhancing viewer engagement and driving growth.

This project aims to analyze Amazon Prime‚Äôs dataset to explore key strategic questions such as:

- What types of content dominate the platform ‚Äî Movies or TV Shows?
- Which genres and certifications are most common and highly rated?
- How are content ratings and IMDb scores distributed across genres and formats?
- What role do countries and cast members play in shaping content?
- Are there trends in content addition over time?

By uncovering these insights, Amazon Prime can better optimize content production, improve recommendations, and target new market segments effectively.

# **Business Objective**

The primary objective of this project is to perform **Exploratory Data Analysis (EDA)** on Amazon Prime‚Äôs content datasets to extract actionable business insights that will help Amazon:

- üìä Understand content trends by genre, type, rating, and runtime  
- üåç Evaluate regional strengths and gaps based on country-wise content production  
- üé¨ Identify top-performing and underrepresented genres for strategic investment  
- ‚≠ê Assess IMDb rating distributions across content categories and certifications  
- üß† Leverage casting and role data for content development and personalization strategies  

These insights will guide Amazon Prime in improving its **content strategy, global expansion, and customer engagement**, thereby maintaining its competitive position in the streaming industry.

# **STEP 1: Know Your Data or Data Understanding**

**In this step, we explored the dataset's basic structure, size, and quality to build an initial understanding before diving deeper into analysis.**

### **Import Libraries**
"""

# Basic Data Analysis Libraries
import numpy as np
import pandas as pd

# Visualization Libraries
import matplotlib.pyplot as plt
import seaborn as sns

"""## **Dataset Loading**"""

# Upload step for Google Colab
from google.colab import files
uploaded = files.upload()

# Load the dataset
df1 = pd.read_csv('credits.csv')

# Upload step for Google Colab
from google.colab import files
uploaded = files.upload()

# Load the dataset
df2 = pd.read_csv('titles.csv')

"""## **Dataset First View**"""

# First 5 rows of dataset 1 - credits.csv
df1.head()

# First 5 rows of dataset 2 - titles.csv
df2.head()

# Quick look at the shape and columns of dataset 1 - credits.csv
print("Dataset Shape : ", df1.shape)
df1.columns

# Quick look at the shape and columns of dataset 2 - titles.csv
print("Dataset Shape : ", df2.shape)
df2.columns

"""## **Dataset Shape & Structure**"""

#Duplicate Rows in dataset
duplicate_count = df1.duplicated().sum()
print(f"Total Duplicate Rows in the Dataset: {duplicate_count}")

#Duplicate Rows in dataset
duplicate_count = df2.duplicated().sum()
print(f"Total Duplicate Rows in the Dataset: {duplicate_count}")

print(f"Number of Rows: {df1.shape[0]}")
print(f"Number of Columns: {df1.shape[1]}")
print("\nColumn Names:\n", df1.columns.tolist())

print(f"Number of Rows: {df2.shape[0]}")
print(f"Number of Columns: {df2.shape[1]}")
print("\nColumn Names:\n", df2.columns.tolist())

"""## **Missing Values/Null Values**"""

# Count missing values in each column of dataset 1 - credit.csv
missing_values = df1.isnull().sum()
print("Missing/Null Values per Column:\n")
print(missing_values[missing_values > 0])

# Count missing values in each column of dataset 2 - titles.csv
missing_values = df2.isnull().sum()
print("Missing/Null Values per Column:\n")
print(missing_values[missing_values > 0])

# Missing value percentage of dataset 1 - credits.csv
missing_percentage = (df1.isnull().sum() / len(df1)) * 100
print("Missing Data Percentage per Column:\n")
print(missing_percentage[missing_percentage > 0])

# Missing value percentage of dataset 2 - titles.csv
missing_percentage = (df2.isnull().sum() / len(df2)) * 100
print("Missing Data Percentage per Column:\n")
print(missing_percentage[missing_percentage > 0])

# Missing value Plot of dataset 1 - credits.csv
import missingno as msno
import matplotlib.pyplot as plt

msno.bar(df1, figsize=(9,5))
plt.title('Missing Values Bar Chart')
plt.show()

# Missing value Plot of dataset 2 - titles.csv
import missingno as msno
import matplotlib.pyplot as plt

msno.bar(df2, figsize=(10, 6))
plt.title('Missing Values Bar Chart')
plt.show()

"""## **What did you know about your dataset?**

The Amazon Prime dataset consists of two parts:

- **Dataset 1 (`credits.csv`)** contains **124,235 rows** and **5 columns**, detailing cast and crew information such as `person_id`, `id`, `name`, `character`, and `role`.
- **Dataset 2 (`titles.csv`)** includes **9,871 rows** and **15 columns**, capturing detailed content metadata like `title`, `type`, `genres`, `release_year`, `runtime`, `imdb_score`, and more.

After merging the two datasets on the `id` column, we obtained a comprehensive view of Amazon Prime‚Äôs content ‚Äî combining both content metadata and associated personnel.

---

### üßæ Key Column Categories:

- **Content Metadata:** `title`, `type`, `genres`, `description`, `release_year`, `runtime`, `age_certification`, `seasons`  
  ‚Üí Useful for analyzing trends in content type, duration, and age-based classifications.

- **Ratings and Popularity:** `imdb_score`, `imdb_votes`, `tmdb_score`, `tmdb_popularity`  
  ‚Üí Enables performance comparisons across different shows and genres.

- **Regional and Production Info:** `production_countries`  
  ‚Üí Helps analyze the geographical spread of content.

- **People Behind the Content (from credits dataset):** `name`, `character`, `role`  
  ‚Üí Offers insights into popular actors, actresses, and crew roles (e.g., director, producer).

---

### ‚ùó Missing Values:

- Columns with missing values include: `age_certification`, `runtime`, `seasons`, `imdb_score`, `imdb_votes`, `tmdb_popularity`
- For the `credits.csv`, duplicates and irrelevant roles were filtered.
- Missing values were handled using:
  - **Imputation:** Filling with mode or average where appropriate.
  - **"Unknown":** Used for non-critical string-based columns.
  - **Row Drops:** Where values were essential and couldn't be imputed meaningfully.

# **STEP 2: Understanding Dataset Variables**

**We analyzed each variable's unique values and data types to understand their significance, relevance, and potential impact on further analysis.**
"""

# Basic Information about the dataset 1 - credits.csv
df1.info()

# Basic Information about the dataset 2 - titles.csv
df2.info()

# Dataset 1 Columns
df1.columns

# Dataset 2 Columns
df2.columns

# Summary statistics of dataset 1
df1.describe()

# Summary statistics of dataset 2
df2.describe()

"""## **Check Unique Values for Each Variable**"""

# Check Unique Values for each variable - Dataset 1

print("Unique Values Count per Column:\n")
for col in df1.columns:
    print(f"{col}: {df1[col].nunique()} unique values")

# Check Unique Values for each variable - Dataset 2

print("Unique Values Count per Column:\n")
for col in df2.columns:
    print(f"{col}: {df2[col].nunique()} unique values")

"""# **STEP 3: Data Wrangling, Cleaning, Preprocessing and Transformation**

**We cleaned missing values, corrected data types, and transformed features to ensure the dataset is reliable, consistent, and ready for meaningful analysis.**
"""

# Check data types and null values - Daatset 1
df1.info()

# Check data types and null values - Daatset 2
df2.info()

"""## **Missing Values or Null Values**"""

# Check how many missing values are in each column - Daatset 1
df1.isnull().sum()

# Visualize missing values - Dataset 1
plt.figure(figsize=(12, 6))
sns.heatmap(df1.isnull(), cbar=False, cmap="YlOrRd")
plt.title("Missing Values Heatmap")
plt.show()

# Check how many missing values are in each column - Daatset 2
df2.isnull().sum()

# Visualize missing values - Dataset 2
plt.figure(figsize=(12, 6))
sns.heatmap(df2.isnull(), cbar=False, cmap="YlOrRd")
plt.title("Missing Values Heatmap")
plt.show()

"""## **Feature Engineering**

**We created new columns derived from existing data to help with further analysis and modeling. These engineered features will be useful for uncovering patterns and trends.**
"""

# 1. Convert Duration (Runtime) to Categories

def runtime_category(x):
    if x < 30:
        return 'Short'
    elif x <= 90:
        return 'Medium'
    else:
        return 'Long'

df2['runtime_category'] = df2['runtime'].apply(runtime_category)

# 2. IMDB & TMDB Score Buckets

def score_bucket(x):
    if x >= 8:
        return 'Excellent'
    elif x >= 6:
        return 'Good'
    elif x >= 4:
        return 'Average'
    else:
        return 'Poor'

df2['imdb_rating_level'] = df2['imdb_score'].apply(score_bucket)

# Join 2 Dataset - Credits and Titles

# Rename id column in df_credits to match df_titles for merge
df1.rename(columns={'id': 'title_id'}, inplace=True)
df2.rename(columns={'id': 'title_id'}, inplace=True)

# Merge on title_id
df_merged = pd.merge(df2, df1, on='title_id', how='left')

# Drop duplicates in both datasets
df1.drop_duplicates(inplace=True)
df2.drop_duplicates(inplace=True)

# Reset index
df1.reset_index(drop=True, inplace=True)
df2.reset_index(drop=True, inplace=True)

# Final shape
print("Final Dataset 1 Shape after safe cleaning:", df1.shape)
print("Final Dataset 2 Shape after safe cleaning:", df2.shape)

# Dataset 1 Details after cleaning
print(f"Number of Rows: {df1.shape[0]}")
print(f"Number of Columns: {df1.shape[1]}")
print("\nColumn Names:\n", df1.columns.tolist())

# Dataset 2 Details after cleaning
print(f"Number of Rows: {df2.shape[0]}")
print(f"Number of Columns: {df2.shape[1]}")
print("\nColumn Names:\n", df2.columns.tolist())

"""# **STEP 4: EDA (Exploratory Data Analysis) , Data Vizualization, Storytelling & Experimenting with charts : Understand the relationships between variables**

**This section presents visual insights using the** **UBM** **(Univariate, Bivariate, Multivariate) approach.**

**Understand the relationships between variables**

‚úÖ U - Univariate Analysis  
‚úÖ B - Bivariate Analysis  
‚úÖ M - Multivariate Analysis

# **UNIVARIATE ANALYSIS :**

Focuses on one variable at a time.

## **Chart 1: Distribution of Content Type (Movie vs TV Show)**

**Why this chart?**

To understand whether Amazon Prime focuses more on movies or TV shows.

**Insight:**

There are significantly more movies than TV shows.

**Business Impact:**

Short-form content like movies may be easier to produce and consume, but increasing TV shows could help increase watch time.
"""

type_counts = df2['type'].value_counts()

plt.figure(figsize=(6,6))
plt.pie(type_counts, labels=type_counts.index, autopct='%1.1f%%', startangle=90, colors=['#ff9999','#66b3ff'])
plt.title('Distribution of Content Types on Prime Video')
plt.axis('equal')
plt.show()

"""## **Chart 2: Number of Unique Actors per Content Type**

**Why this chart?**

To understand the distribution of content ratings and suitability for various age groups.

**Insight:**

Most content is rated 'TV-MA' and 'TV-14', targeting mature and teen audiences.

**Business Impact:**

This helps in tailoring parental controls, age recommendations, and content promotion strategies.
"""

# Count unique actors per content type
cast_per_type = df_merged[df_merged['role'] == 'ACTOR'].groupby('type')['person_id'].nunique().reset_index()

plt.figure(figsize=(6,4))
sns.barplot(data=cast_per_type, x='type', y='person_id', palette='coolwarm')
plt.title('Unique Cast Members by Content Type')
plt.xlabel('Type')
plt.ylabel('Number of Unique Actors')
plt.show()

"""## **Chart 3: Year-wise Content Release Distribution**

**Why this chart?**

To see which years had the highest content releases on Netflix

**Insight:**

Content releases have increased significantly in the last decade.

**Business Impact:**

Helps Netflix understand trends and make decisions on acquiring or producing newer vs. classic content.
"""

# Explode genres
df_genre = df_merged.dropna(subset=['genres'])
df_genre['genres'] = df_genre['genres'].str.split(',')
df_genre = df_genre.explode('genres')

top_genres = df_genre['genres'].value_counts().head(10).reset_index()
top_genres.columns = ['Genre', 'Count']

plt.figure(figsize=(10,5))
sns.barplot(data=top_genres, x='Genre', y='Count', palette='viridis')
plt.title('Top 10 Genres on Prime Video')
plt.xticks(rotation=45)
plt.show()

"""## **Chart 4: Content Release Year Distribution**

**Why this chart?**

To examine trends in content production across time.

**Insight:**

Recent years have seen a sharp rise in content output.

**Business Impact:**

Amazon Prime can analyze peak production years to study audience response.
"""

plt.figure(figsize=(10,5))
plt.hist(df2['release_year'].dropna(), bins=30, color='skyblue', edgecolor='black')
plt.title('Content Release Year Distribution')
plt.xlabel('Release Year')
plt.ylabel('Number of Titles')
plt.show()

"""## **Chart 5: Top 10 Most Frequent Actors/Actresses**

**Why this chart?**

To analyze which actors/actresses appear most frequently in Amazon Prime content. This shows casting trends and popular talent.

**Insight:**

The top 10 most featured people indicate Amazon Prime‚Äôs frequent collaborations and user-preferred talent.

**Business Impact:**

Identifying top contributors helps Amazon Prime strengthen partnerships and tailor content around popular figures, driving higher engagement and viewership.
"""

# Top 10 most frequent people (actors/actresses) in df_credits
top_people = df1['name'].value_counts().head(10)

# Plot
plt.figure(figsize=(8,5))
sns.barplot(x=top_people.values, y=top_people.index, palette='magma')
plt.title('Top 10 Most Featured People on Amazon Prime')
plt.xlabel('Number of Appearances')
plt.ylabel('Name')
plt.tight_layout()
plt.show()

"""# **BIVARIATE ANALYSIS :**

Relationship between 2 variables.

## **Chart 6: Content Type vs IMDb Score**

**Why this chart?**

To compare the IMDb score distribution for Movies and TV Shows.

**Insight:**

Movies tend to have a slightly higher median IMDb score compared to TV Shows.

**Business Impact:**

Focus on enhancing quality of TV Shows or promote high-rated shows to increase engagement.
"""

# Boxplot
plt.figure(figsize=(6,4))
sns.boxplot(data=df2, x='type', y='imdb_score', palette='Set2')
plt.title('IMDb Score by Content Type')
plt.xlabel('Content Type')
plt.ylabel('IMDb Score')
plt.tight_layout()
plt.show()

"""## **Chart 7: Runtime vs IMDb Score**

**Why this chart?**

To see how runtime impacts the IMDb score.

**Insight:**

Very long or very short content tends to get mixed reviews, while moderate runtimes have more consistent scores.

**Business Impact:**

Focus on ideal runtime brackets to maintain audience satisfaction and quality.
"""

# Scatter Plot
plt.figure(figsize=(6,4))
sns.scatterplot(data=df2, x='runtime', y='imdb_score', alpha=0.6, color='orange')
plt.title('Runtime vs IMDb Score')
plt.xlabel('Runtime (minutes)')
plt.ylabel('IMDb Score')
plt.tight_layout()
plt.show()

"""## **Chart 8: IMDb Score vs TMDB Score**

**Why this chart?**

To compare two popular scoring systems: IMDb and TMDB.

**Insight:**

There is a positive correlation between IMDb and TMDB scores, but with some variations.

**Business Impact:**

Helps in validating content quality using multiple rating sources for marketing decisions.
"""

# Scatter Plot with Regression Line

plt.figure(figsize=(6,4))
sns.regplot(data=df2, x='imdb_score', y='tmdb_score', scatter_kws={'alpha':0.5}, line_kws={'color':'red'})
plt.title('IMDb Score vs TMDB Score')
plt.xlabel('IMDb Score')
plt.ylabel('TMDB Score')
plt.tight_layout()
plt.show()

"""## **Chart 9: Top Genres vs Average IMDb Score**

**Why this chart?**

To identify which genres receive the highest average IMDb scores.

**Insight:**

Genres like Documentary and Drama tend to receive higher IMDb ratings.

**Business Impact:**

Helps in genre prioritization based on viewer satisfaction.
"""

# Bar Plot
# Split and explode genres
df_genre = df_merged[['genres', 'imdb_score']].dropna()
df_genre['genres'] = df_genre['genres'].str.split(',')
df_genre = df_genre.explode('genres')
df_genre['genres'] = df_genre['genres'].str.strip()

# Group by genre and calculate average IMDb score
genre_score = df_genre.groupby('genres')['imdb_score'].mean().sort_values(ascending=False).head(10)

# Plot
plt.figure(figsize=(8,4))
sns.barplot(x=genre_score.values, y=genre_score.index, palette='coolwarm')
plt.title('Top Genres by Average IMDb Score')
plt.xlabel('Average IMDb Score')
plt.ylabel('Genre')
plt.tight_layout()
plt.show()

"""## **Chart 10: Role Type vs Count of Appearances**

**Why this chart?**

To examine the distribution of different role types like "ACTOR", "DIRECTOR", etc.

**Insight:**

ACTOR is the most common role, followed by DIRECTOR and PRODUCER.

**Business Impact:**

Helps understand which roles dominate content creation and team structuring.
"""

# Count Plot
plt.figure(figsize=(6,4))
sns.countplot(data=df1, y='role', order=df1['role'].value_counts().index, palette='viridis')
plt.title('Distribution of Role Types')
plt.xlabel('Count')
plt.ylabel('Role')
plt.tight_layout()
plt.show()

"""# **MULTIVARIATE ANALYSIS :**

Understand interaction between 3 or more variables.

## **Chart 11: IMDb Score vs Runtime, colored by Content Type**

**Why this chart?**

To explore how runtime and content type together affect IMDb ratings.

**Insight:**

Movies generally have more runtime and slightly higher scores. Short-form TV Shows often fall below the average rating.

**Business Impact:**

Optimizing runtime based on content type can improve viewer satisfaction and ratings.
"""

# Scatter Plot (Hue = Content Type)
plt.figure(figsize=(7,5))
sns.scatterplot(data=df2, x='runtime', y='imdb_score', hue='type', alpha=0.6)
plt.title('IMDb Score vs Runtime by Content Type')
plt.xlabel('Runtime (min)')
plt.ylabel('IMDb Score')
plt.tight_layout()
plt.show()

"""## **Chart 12: Average IMDb Score by Age Certification & Content Type**

**Why this chart?**

To understand how content rating (age certification) affects IMDb scores across Movies and TV Shows.

**Insight:**

Content rated TV-MA and R tends to have higher IMDb scores, especially in Movies.

**Business Impact:**

This helps tailor content production toward age groups with higher engagement and critical acclaim.
"""

#  Grouped Bar Chart
# Clean and group data
age_score = df2.dropna(subset=['age_certification', 'imdb_score'])
avg_scores = age_score.groupby(['age_certification', 'type'])['imdb_score'].mean().reset_index()

plt.figure(figsize=(10,6))
sns.barplot(data=avg_scores, x='age_certification', y='imdb_score', hue='type', palette='muted')
plt.title('Average IMDb Score by Age Certification and Content Type')
plt.xlabel('Age Certification')
plt.ylabel('Average IMDb Score')
plt.tight_layout()
plt.show()

"""## **Chart 13: Content Release Trends Over Years by Type**

**Why this chart?**

To understand how the number of Movies and TV Shows released each year has evolved.

**Insight Goal:**

There has been a consistent rise in both Movies and TV Shows, with Movies still dominating post-2018.

**Business Impact:**

Tracks production trends to optimize yearly release strategies.
"""

# Line Chart
release_trend = df2.groupby(['release_year', 'type']).size().reset_index(name='count')

plt.figure(figsize=(8,5))
sns.lineplot(data=release_trend, x='release_year', y='count', hue='type', marker='o')
plt.title('Content Release Trend Over the Years')
plt.xlabel('Release Year')
plt.ylabel('Number of Titles')
plt.tight_layout()
plt.show()

"""## **Chart 14: Top 10 Actors with Highest Appearances in High IMDb Score Content (>7.5)**

**Why this chart?**

To discover which actors are associated with highly rated content.

**Insight Goal:**

Some actors appear consistently in top-rated titles ‚Äî indicating strong audience appeal.

**Business Impact:**

Casting strategies can be improved based on actor-performance associations.
"""

#  Horizontal Bar Chart
# Filter for high-rated content
high_rated = df_merged[df_merged['imdb_score'] > 7.5]
top_actors = high_rated[high_rated['role'] == 'ACTOR']['name'].value_counts().head(10)

plt.figure(figsize=(8,4))
sns.barplot(x=top_actors.values, y=top_actors.index, palette='crest')
plt.title('Top 10 Actors in High IMDb Score Content')
plt.xlabel('Appearances')
plt.ylabel('Actor')
plt.tight_layout()
plt.show()

"""## **Chart 15: Actor Appearances by Genre (Top 5 Genres)**

**Why this chart?**

To find which genres feature the most actors and how genre selection affects casting diversity.

**Insight Goal:**

Drama and Comedy have the highest actor involvement, indicating broad storylines and large casts.

**Business Impact:**

Can guide genre-based hiring and budgeting decisions, especially for actor-heavy productions.
"""

# Stacked Bar Chart

# Genre-Actor combo
genre_actor = df_merged[['name', 'genres', 'role']].dropna()
genre_actor = genre_actor[genre_actor['role'] == 'ACTOR']
genre_actor['genres'] = genre_actor['genres'].str.split(',')
genre_actor = genre_actor.explode('genres')
genre_actor['genres'] = genre_actor['genres'].str.strip()

# Top genres
top_genres = genre_actor['genres'].value_counts().head(5).index
filtered = genre_actor[genre_actor['genres'].isin(top_genres)]

# Count by genre
actor_genre_counts = filtered.groupby(['genres', 'name']).size().reset_index(name='count')
pivot = actor_genre_counts.pivot_table(index='name', columns='genres', values='count', fill_value=0)

# Only top 10 actors with most appearances
top_actors = pivot.sum(axis=1).sort_values(ascending=False).head(10)
pivot = pivot.loc[top_actors.index]

# Plot
pivot.plot(kind='barh', stacked=True, figsize=(10,6), colormap='tab20')
plt.title('Top Actor Appearances by Genre (Stacked)')
plt.xlabel('Number of Appearances')
plt.ylabel('Actor')
plt.tight_layout()
plt.legend(title='Genre', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""# **STEP 5: Solution to Business Objective**

## **What do you suggest the client to achieve Business Objective ?**

Based on our comprehensive Exploratory Data Analysis (EDA) of Amazon Prime content, including trends across genres, content type, IMDb ratings, casting, and runtime insights, here are key recommendations to meet the business objectives:

---

**1. Invest More in High-Performing Genres**  
Genres such as **Drama, Comedy, and Action** dominate in terms of content volume and user engagement (ratings and votes). These genres also feature high actor involvement, indicating broader storytelling.  
**üëâ Suggestion:** Prioritize original content production in these top genres to drive viewer retention.

---

**2. Focus on Age Certification Preferences**  
‚Äò**TV-MA**‚Äô and ‚Äò**PG-13**‚Äô content types show higher average IMDb scores, especially for movies.  
**üëâ Suggestion:** Tailor content strategies to these certifications for better user satisfaction and ratings.

---

**3. Optimize Content Length by Format**  
TV shows with **moderate season counts and runtimes** show better user engagement.  
**üëâ Suggestion:** Avoid overly long series or very short shows. Stick to mid-length TV shows with tighter narratives.

---

**4. Data-Driven Talent Strategy**  
Frequent actors and creators can be leveraged for new launches, especially in high-performing genres.  
**üëâ Suggestion:** Partner repeatedly with **high-impact cast members** to build brand value and loyal fanbases.

---

**5. Regional and Global Focus**  
A strong portion of content is focused on specific production countries.  
**üëâ Suggestion:** Expand content acquisition and production to **underrepresented regions** to capture new audiences.

# **Conclusion**

In this Amazon Prime EDA project, we cleaned and analyzed two datasets ‚Äî titles and credits ‚Äî comprising over 9,800 titles and 124,000 cast/crew records to uncover key content trends and platform insights.

### üîç Key Insights:



*   **Content Type:** Movies dominate the platform, but TV Shows with mid-level seasons offer strong engagement.
*  **Genres:** Drama, Comedy, and Action are the most featured and top-rated genres.
*   **Ratings**: Majority of the content is rated TV-MA and PG-13, signaling a mature audience focus.

*   **Release Trends:** Surge in content additions post-2018, peaking around 2020.
*   **Popular Talent:** Some actors appear in multiple successful titles, showing potential for recurring partnerships.


### üéØ Business Suggestions:


*   Expand family-friendly and international content to diversify the audience.

*   Double down on high-performing genres like Drama and Comedy.
*   Use content duration trends to optimize movie lengths and series formats.
*   Focus marketing around peak content years and popular creators to maximize traction.

*   Leverage cast frequency data for strategic casting decisions.

This analysis empowers Amazon Prime Video to make data-driven decisions ‚Äî enhancing viewer experience, improving content strategy, and ultimately driving user growth and retention.
"""